# BuildSettings
#
# Setup global variables.

# C and C++ flags
if $(OSPLAT) = PPC {
	# filter out -nosyspath
	CFLAGS = [ FFilter $(CFLAGS) : -nosyspath ] ;
	C++FLAGS = [ FFilter $(C++FLAGS) : -nosyspath ] ;
	LINKFLAGS += -warn -export pragma ;
} else {
	CFLAGS += -mcpu=pentiumpro ;
	C++FLAGS += -mcpu=pentiumpro ;
}

LIBNETAPI = netapi ;	# default, may be changed to bnetapi (see below)

if $(OSPLAT) = X86 {
	# check for BONE...
	local haveBone = [ GLOB /boot/develop/headers/be/bone/arpa : inet.h ] ;
	if $(haveBone)	{
		CCFLAGS += -DBEAM_FOR_BONE ;
		C++FLAGS += -DBEAM_FOR_BONE ;
		SYSHDRS += /boot/develop/headers/be/bone /boot/develop/headers/be/bone/sys ;
		LINKLIBS += -lsocket -lbind ;
	}
	# check for Zeta...
	local haveZeta = [ GLOB /boot/beos/system/lib : libzeta.so ] ;
	if $(haveZeta)	{
		LINKLIBS += -lzeta ;
		CCFLAGS += -D_ZETA_USING_DEPRECATED_API_ ;
		C++FLAGS += -D_ZETA_USING_DEPRECATED_API_ ;
		SYSHDRS += /boot/develop/headers/liblayout /boot/develop/headers/pcre ;
	}
	# check for libbnetapi...
	local haveLibbnetapi = [ GLOB /boot/develop/lib/x86 : libbnetapi.so ] ;
	if $(haveLibbnetapi) {
		LIBNETAPI = bnetapi ;
	}
}

# Use copyattr for copying.
CP = copyattr --data ;

# Default paths for bison and flex:
BISON = bison ;
LEX = flex ;

# mkdir shall not fail, if the directory already exists.
MKDIR = mkdir -p ;

# by default we do not strip and do not build tests:
STRIP_APPS ?= 0 ;
BUILD_TESTS ?= 0 ;
# For consistency, we evaluate BUILD_DEBUG, too:
DEBUG ?= $(BUILD_DEBUG) ;

rule SetUpSubDirBuildSettings {
	# SetUpSubDirBuildSettings <dir> ;
	#
	# Sets up the compiler flags and defines based on the WARNINGS, DEBUG, and
	# OPTIMIZE variables. Also sets the locations for the targets (objects,
	# libraries and executables).
	#
	# <dir>: Parameters as passed to the SubDir rule, i.e. the name of the
	#        TOP variable and the subdir tokens.
	#
	local dir = $(1) ;

	# warnings settings
	if $(WARNINGS) != 0 {
		if $(OSPLAT) = X86 {
			CCFLAGS += -Wall -Wno-multichar -Wmissing-prototypes 
						  -Wpointer-arith -Wcast-align -Wsign-compare ;
			C++FLAGS += -Wall -Wno-multichar -Wmissing-prototypes 
							-Wno-ctor-dtor-privacy -Woverloaded-virtual 
							-Wconversion -Wpointer-arith -Wstrict-prototypes 
							-Wcast-align -Wsign-compare -Wno-reorder 
							-Wno-unknown-pragmas ;
		} else {
			CCFLAGS += -w on -requireprotos ;
		}
	}

	# debugging settings
	if $(DEBUG) && $(DEBUG) != 0 {
		OPTIMIZE = 0 ;
		STRIP_APPS = 0 ;
		DEFINES += DEBUG=$(DEBUG) BM_REF_DEBUGGING ;
		CCFLAGS += -g ;
		C++FLAGS += -g -fno-inline ;
		LINKFLAGS += -g ;
		DISTRO_DIR			= [ FDirName $(TOP) generated distro_debug ] ;
		OBJECTS_DIR			= [ FDirName $(TOP) generated objects-debug ] ;
	}
	else 
	{
		OBJECTS_DIR			= [ FDirName $(TOP) generated objects-nodebug ] ;
	}

	# optimization settings
	if $(OPTIMIZE) = 0 {
		if $(OSPLAT) = X86 {
			OPTIM = -O0 ;
		} else {
			OPTIM = -O0 ;
		}
	} else {
		if $(OSPLAT) = X86 {
			OPTIM ?= -O3 -fstrict-aliasing ;
		} else {
			OPTIM ?= -O7 ;
		}
	}

	# setup objects location
	local objdir = [ FDirName $(OBJECTS_DIR) $(dir[2-]) ] ;
	SEARCH_SOURCE += $(objdir) ;
	LOCATE_SOURCE = $(objdir) ;
	LOCATE_TARGET = $(objdir) ;

	# setup main targets location
	LOCATE_MAIN_TARGET ?= [ FDirName $(DISTRO_DIR) ] ;
}

# The LOCATE_MAIN_TARGET variable shall be reset for each subdirectory.
AUTO_SET_UP_CONFIG_VARIABLES += LOCATE_MAIN_TARGET ;

# Add the rules setting up the build settings for a subdirectory to the
# rules invoked by SubDir.
SUBDIRRULES += SetUpSubDirBuildSettings ;
